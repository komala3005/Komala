import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from xgboost import XGBRegressor

# Load dataset (using sklearn's Boston housing alternative - California housing)
from sklearn.datasets import fetch_california_housing
data = fetch_california_housing(as_frame=True)
df = data.frame

# Step 1: Exploratory Data Analysis
print("Dataset Head:")
print(df.head())

# Step 2: Feature Engineering (Optional â€“ we could add interaction terms or log transforms)
df['Rooms_per_household'] = df['AveRooms'] / df['Households']
df['Bedrooms_per_room'] = df['AveBedrms'] / df['AveRooms']
df['Population_per_household'] = df['Population'] / df['Households']

# Step 3: Feature Selection
X = df.drop('MedHouseVal', axis=1)
y = df['MedHouseVal']

# Step 4: Train/Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Step 6: Model Training with Smart Regressor (Ensemble + Tuning)
xgb_model = XGBRegressor(n_estimators=100, learning_rate=0.1, max_depth=5, random_state=42)
xgb_model.fit(X_train_scaled, y_train)

# Predict and Evaluate
y_pred = xgb_model.predict(X_test_scaled)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.3f}")
print(f"R^2 Score: {r2:.3f}")

# Feature Importance Plot
plt.figure(figsize=(10,6))
sns.barplot(x=xgb_model.feature_importances_, y=X.columns)
plt.title("Feature Importances from XGBoost")
plt.show()
